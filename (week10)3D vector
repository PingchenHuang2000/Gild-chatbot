import streamlit as st
import time
import numpy as np

# Pet profiles as 3D vectors: [calmness, activity, beginner_friendly]
pet_profiles = {
    "Charlie the senior cat": np.array([0.9, 0.1, 0.8]),
    "Luna the gentle rabbit": np.array([0.8, 0.2, 1.0]),
    "Buddy the energetic dog": np.array([0.2, 0.9, 0.3]),
    "Daisy the playful kitten": np.array([0.6, 0.7, 0.9])
}

# Map keywords to 3D vectors
keyword_to_vector = {
    "quiet": np.array([1.0, 0.0, 0.6]),
    "calm": np.array([1.0, 0.1, 0.5]),
    "active": np.array([0.1, 1.0, 0.4]),
    "outdoor": np.array([0.0, 1.0, 0.5]),
    "kids": np.array([0.5, 0.6, 1.0]),
    "first pet": np.array([0.7, 0.3, 1.0]),
    "apartment": np.array([1.0, 0.1, 0.9])
}

user_name = "Jane"
user_image = "https://github.com/PingchenHuang2000/pet_adoption_userimage/blob/main/pet-care.png?raw=true"
placeholderstr = "Hi there!! Tell me about your lifestyle or what kind of pet you're looking for."

def stream_data(stream_str):
    for word in stream_str.split(" "):
        yield word + " "
        time.sleep(0.05)

def generate_response(prompt):
    prompt_lower = prompt.lower()
    user_vector = np.zeros(3)
    matched = False

    for keyword, vec in keyword_to_vector.items():
        if keyword in prompt_lower:
            user_vector += vec
            matched = True

    if not matched:
        return "Tell me more about your lifestyle or what you're looking for in a pet!"

    # Find best-matching pet using cosine similarity
    best_pet = None
    best_score = -np.inf
    for pet_name, pet_vec in pet_profiles.items():
        score = np.dot(user_vector, pet_vec) / (np.linalg.norm(user_vector) * np.linalg.norm(pet_vec))
        if score > best_score:
            best_score = score
            best_pet = pet_name

    return f"Based on what you shared, I recommend **{best_pet}**! 🐾"

def main():
    st.set_page_config(
        page_title='Pet Adoption Advisor Chatbot',
        layout='wide',
        initial_sidebar_state='auto',
        page_icon="🐾"
    )

    st.title(f"🐾 {user_name}'s Pet Adoption Chatbot")

    with st.sidebar:
        st.selectbox("Language", ["English", "繁體中文"], index=0)
        st.image(user_image, width=100)
        st.write("Welcome to the Pet Adoption Advisor! 🐶🐱🐰")

    st_c_chat = st.container(border=True)

    if "messages" not in st.session_state:
        st.session_state.messages = []
    else:
        for msg in st.session_state.messages:
            if msg["role"] == "user":
                st_c_chat.chat_message("user", avatar=user_image).markdown(msg["content"])
            else:
                st_c_chat.chat_message("assistant").markdown(msg["content"])

    def chat(prompt: str):
        st_c_chat.chat_message("user", avatar=user_image).write(prompt)
        st.session_state.messages.append({"role": "user", "content": prompt})

        response = generate_response(prompt)
        st.session_state.messages.append({"role": "assistant", "content": response})
        st_c_chat.chat_message("assistant").write_stream(stream_data(response))

    if prompt := st.chat_input(placeholder=placeholderstr):
        chat(prompt)

if __name__ == "__main__":
    main()
