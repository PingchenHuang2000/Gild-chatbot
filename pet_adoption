import streamlit as st
import time

# Simulated pet recommendations based on personality and lifestyle
pet_recommendations = {
    "quiet": "You might love a calm senior cat like Charlie or a gentle rabbit like Luna. Would you prefer a low-maintenance pet?",
    "calm": "You might love a calm senior cat like Charlie or a gentle rabbit like Luna. Would you prefer a low-maintenance pet?",
    "active": "An energetic dog like Buddy would be perfect for your outdoor adventures!",
    "outdoor": "An energetic dog like Buddy would be perfect for your outdoor adventures!",
    "kids": "A playful and friendly pet like Daisy the kitten would be great for families with children.",
    "first pet": "Luna the rabbit or Charlie the older cat are perfect for first-time pet owners.",
    "apartment": "A quiet, independent cat like Charlie is ideal for apartment living."
}

user_name = "Jane"
user_image = "https://github.com/PingchenHuang2000/pet_adoption_userimage/blob/main/pet-care.png?raw=true"
placeholderstr = "Hi there!! Tell me about your lifestyle or what kind of pet you're looking for."

def stream_data(stream_str):
    for word in stream_str.split(" "):
        yield word + " "
        time.sleep(0.1)

def generate_response(prompt):
    prompt_lower = prompt.lower()
    for keyword, response in pet_recommendations.items():
        if keyword in prompt_lower:
            return response
    return "Tell me more about your lifestyle or what you're looking for in a pet!"

def main():
    st.set_page_config(
        page_title='Pet Adoption Advisor Chatbot',
        layout='wide',
        initial_sidebar_state='auto',
        page_icon="🐾"
    )

    st.title(f"🐾 {user_name}'s Pet Adoption Chatbot")

    with st.sidebar:
        st.selectbox("Language", ["English","繁體中文"], index=0)
        st.image(user_image, width=100)
        st.write("Welcome to the Pet Adoption Advisor! 🐶🐱🐰")

    st_c_chat = st.container(border=True)

    if "messages" not in st.session_state:
        st.session_state.messages = []
    else:
        for msg in st.session_state.messages:
            if msg["role"] == "user":
                st_c_chat.chat_message("user", avatar=user_image).markdown(msg["content"])
            else:
                st_c_chat.chat_message("assistant").markdown(msg["content"])

    def chat(prompt: str):
        st_c_chat.chat_message("user", avatar=user_image).write(prompt)
        st.session_state.messages.append({"role": "user", "content": prompt})

        response = generate_response(prompt)
        st.session_state.messages.append({"role": "assistant", "content": response})
        st_c_chat.chat_message("assistant").write_stream(stream_data(response))

    if prompt := st.chat_input(placeholder=placeholderstr):
        chat(prompt)

if __name__ == "__main__":
    main()
